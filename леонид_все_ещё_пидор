import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import precision_score, recall_score
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Embedding, Flatten, Dense, Concatenate

# 1. Загрузка данных
data = pd.read_csv("ml_model_training_data_items_2024_10_15_202412042038.csv")

# Обзор данных
print(data.head())
print(data.info())
print(data.describe())

# 2. Предобработка данных
# Проверка на пропущенные значения
print(data.isnull().sum())

# Удаление строк с пропущенными значениями (если их мало)
data = data.dropna()

# Кодирование категориальных признаков
encoder = OneHotEncoder()

# Замена fz на pn_lot
encoded_pn_lot = encoder.fit_transform(data[['pn_lot']]).toarray()
encoded_okpd2 = encoder.fit_transform(data[['okpd2_code']]).toarray()

# Создание новых признаков
data['year'] = pd.to_datetime(data['min_publish_date']).dt.year
data['month'] = pd.to_datetime(data['min_publish_date']).dt.month

# Сборка финального датасета
encoded_pn_lot_df = pd.DataFrame(encoded_pn_lot, columns=[f"pn_lot_{i}" for i in range(encoded_pn_lot.shape[1])])
encoded_okpd2_df = pd.DataFrame(encoded_okpd2, columns=[f"okpd2_{i}" for i in range(encoded_okpd2.shape[1])])

data = pd.concat([data.reset_index(drop=True), encoded_pn_lot_df, encoded_okpd2_df], axis=1)

# 3. Разделение данных на тренировочную и тестовую выборки
X = data.drop(columns=['purchase_name', 'lot_name', 'customer_inn_kpp_md5', 'min_publish_date'])
y = data['lot_price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Создание модели
# Параметры
num_features = X_train.shape[1]

# Входные данные
input_layer = Input(shape=(num_features,))

# Полносвязные слои
dense_1 = Dense(128, activation='relu')(input_layer)
dense_2 = Dense(64, activation='relu')(dense_1)
output = Dense(1, activation='linear')(dense_2)

# Создание модели
model = Model(inputs=input_layer, outputs=output)
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

# 5. Обучение модели
history = model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.2)

# 6. Оценка модели
predictions = model.predict(X_test)
mse = tf.keras.losses.MeanSquaredError()(y_test, predictions).numpy()
print(f"Mean Squared Error: {mse}")

# Для классификации (если нужно):
# predictions_binary = (predictions > threshold).astype(int)
# precision = precision_score(y_test, predictions_binary)
# recall = recall_score(y_test, predictions_binary)
# print(f"Precision: {precision}, Recall: {recall}")


