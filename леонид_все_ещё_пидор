# Импорт необходимых библиотек

import pandas as pd  # Библиотека для работы с табличными данными (DataFrame)

from sklearn.model_selection import train_test_split  # Разделение данных на тренировочную и тестовую выборки
from sklearn.preprocessing import OneHotEncoder  # Кодирование категориальных признаков (One-Hot Encoding)
from sklearn.metrics import precision_score, recall_score  # Метрики для оценки качества классификации

import tensorflow as tf  # Фреймворк для машинного обучения и глубокого обучения
from tensorflow.keras.models import Model  # Класс для создания модели нейросети
from tensorflow.keras.layers import Input, Dense  # Основные слои нейросети
from tensorflow.keras.losses import MeanSquaredError  # Функция потерь для регрессии

# 1. Загрузка данных
data = pd.read_csv("ml_model_training_data_items_2024_10_15_202412042038.csv")  # Чтение CSV-файла в DataFrame

# Обзор данных
print(data.head())  # Вывод первых 5 строк датасета
print(data.info())  # Вывод информации о датасете (типы данных, количество пропущенных значений)
print(data.describe())  # Вычисление статистических характеристик числовых столбцов

# 2. Предобработка данных

# Проверка на пропущенные значения
print(data.isnull().sum())  # Подсчет количества пропущенных значений в каждом столбце

# Удаление строк с пропущенными значениями (если их немного)
data = data.dropna()

# Кодирование категориальных признаков с помощью One-Hot Encoding
encoder = OneHotEncoder()

# Кодирование столбца 'pn_lot'
encoded_pn_lot = encoder.fit_transform(data[['pn_lot']]).toarray()
# Кодирование столбца 'okpd2_code'
encoded_okpd2 = encoder.fit_transform(data[['okpd2_code']]).toarray()

# Создание новых признаков (извлечение года и месяца из даты)
data['year'] = pd.to_datetime(data['min_publish_date']).dt.year  # Извлечение года
data['month'] = pd.to_datetime(data['min_publish_date']).dt.month  # Извлечение месяца

# Создание DataFrame из закодированных категориальных данных
encoded_pn_lot_df = pd.DataFrame(encoded_pn_lot, columns=[f"pn_lot_{i}" for i in range(encoded_pn_lot.shape[1])])
encoded_okpd2_df = pd.DataFrame(encoded_okpd2, columns=[f"okpd2_{i}" for i in range(encoded_okpd2.shape[1])])

# Объединение всех данных в один DataFrame
data = pd.concat([data.reset_index(drop=True), encoded_pn_lot_df, encoded_okpd2_df], axis=1)

# 3. Разделение данных на тренировочную и тестовую выборки
# Выбираем признаки (фичи), исключая ненужные столбцы
X = data.drop(columns=['purchase_name', 'lot_name', 'customer_inn_kpp_md5', 'min_publish_date'])
# Целевая переменная (цена лота)
y = data['lot_price']

# Разделение на обучающий и тестовый набор (80% - обучение, 20% - тест)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Создание модели

# Определение количества входных признаков (фичей)
num_features = X_train.shape[1]

# Создание входного слоя модели
input_layer = Input(shape=(num_features,))

# Добавление полносвязных (Dense) слоев
dense_1 = Dense(128, activation='relu')(input_layer)  # Скрытый слой с 128 нейронами и ReLU-активацией
dense_2 = Dense(64, activation='relu')(dense_1)  # Второй скрытый слой с 64 нейронами и ReLU-активацией
output = Dense(1, activation='linear')(dense_2)  # Выходной слой для регрессии (линейная активация)

# Создание модели
model = Model(inputs=input_layer, outputs=output)

# Компиляция модели: оптимизатор Adam, функция потерь - среднеквадратичная ошибка (MSE)
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

# 5. Обучение модели

# Запуск процесса обучения модели на тренировочных данных
history = model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.2)

# 6. Оценка модели

# Получение предсказаний на тестовом наборе
predictions = model.predict(X_test)

# Вычисление среднеквадратичной ошибки (MSE) для оценки качества регрессии
mse = MeanSquaredError()(y_test, predictions).numpy()
print(f"Mean Squared Error: {mse}")  # Вывод MSE

# Альтернативный вариант: если бы модель была для классификации
# predictions_binary = (predictions > threshold).astype(int)  # Преобразование в бинарные предсказания
# precision = precision_score(y_test, predictions_binary)  # Вычисление precision (точности)
# recall = recall_score(y_test, predictions_binary)  # Вычисление recall (полноты)
# print(f"Precision: {precision}, Recall: {recall}")  # Вывод метрик
